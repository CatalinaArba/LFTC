SET OF NON-TERMINALS
program,decllist,declaration,listDeclaration,listInt,listString,cmpdstmt,stmtlist,stmt,simplstmt,structstmt,assignstmt,expression,operator,iostmt,ifstmt,ifsimplestmt,ifelsestmt,whilestmt,forstmt,condition,type,term,factor
SET OF TERMINALS
{, }, ;, [, ], (, ), +, -, *, /, %, read, write, if, else, whileLoop, forLoop, <, <=, ==, !=, >=, >, =, boolean, char, int, string, double, identifier, constant, ,
PRODUCTIONS
program -> decllist cmpdstmt
decllist -> declaration ; | declaration ; decllist
declaration -> type listDeclaration | type identifier
type -> boolean | char | int | string | double
listDeclaration -> identifier [ listInt ] | identifier [ listString ] | identifier [ ]
listInt -> constant , listInt | constant
listString -> constant , listString | constant
cmpdstmt -> stmtlist
stmtlist -> stmt ; stmtlist | stmt ;
stmt -> simplstmt | structstmt
simplstmt -> assignstmt | iostmt
assignstmt -> identifier = expression
expression -> term + expression | term - expression | term
term -> factor + term | factor * term | factor / term | factor % term | factor
factor -> ( expression ) | identifier | constant | identifier [ expression ]
operator -> + | - | * | / | %
iostmt -> read identifier | write identifier | write constant | read identifier [ expression ]
structstmt -> ifstmt | whilestmt | forstmt
ifstmt -> ifsimplestmt | ifelsestmt
ifsimplestmt -> if ( condition ) { stmtlist }
ifelsestmt -> if ( condition ) { stmtlist } else { stmtlist }
whilestmt -> whileLoop ( condition ) { stmtlist }
forstmt -> forLoop ( assignstmt ; condition ; assignstmt ) { stmtlist }
condition -> expression < expression | expression <= expression | expression == expression | expression != expression | expression >= expression | expression > expression
STARTING SYMBOL
program